---
layout: post
title:  "MacGuyver 2.0"
date:   2013-04-08 18:42:09
categories: jekyll update
---
For those of us born in the 80s, there was one particular hero that will forever wander in our subconscious creativity as he embodied the universe of resourcefulness more than any other TV character in the last 20 or 30 years. What made this individual so special? The mere fact that you could put him inside a locked bank vault with only his Swiss Army knife, some scotch tape, a few metal rods and a lighter, and he would bust out of that door riding an F16 fighter jet...built from scratch. A bit of an exaggeration perhaps, but not far from the truth. He embodied the Renaissance Man of the 20th Century by knowing a bit of everything and having the adeptness to put them to use when the time was right. His name was MacGuyver. And that is exactly what the full immersion aimed to inculcate us on this second week.

We started the first week with command line interfacing (CLI) to understand how the inner guts of the computer really work. You don't get a real feeling of this when you are looking at your beautiful graphical user interfaces (GUI). You get it when all that stands between you and your files is a blinking cursor and a black screen. After getting a solid understanding of how we could use CLI terminals to do practically anything in our operating systems, we moved onto Ruby. Of course no one expected to become a bad ass Ruby programmer at the end of the course with just 12 weeks of intense education, but the foundation was laid a world of development to be built upon. We jumped from typing "Hello World!" on the screen to creating objects and attributing them with a series of functionalities that would impress any Computer Science student in their third year of university. In just a single week we had transformed from mere mortals to digital dwellers. And that was just the start.

After having been handed the keys to the kingdom, we were now introduced to the building blocks behind web development: databases, servers and front end. Without these three elements you would never have a a storage facility for in/out data, a platform to upload/showcase your work and finally the most important of all probably, everything the user will see when he logs into your masterpiece. We had big arguments over the first one because while most of the world prefers the famous MySQL software to work with databases, our instructor preferred the little elephant faced PostgreSQL to develop our data-filled tables. Dealing with this new piece of technology became a bit of a challenge for all of us due to Postgres' interesting GUI and its intricate properties when it came to creating even the simplest list of names and addresses. Eventually, it all sank in. After all, we wouldn't be database experts, all we needed to learn were the basic operations behind the little elephant. Then the week got a bit more interesting. We were finally going to build elementary web products and plasmate them in our own servers.

I like analogies, and I think one is perfect to describe the front end development side of the week. A house can have rooms, kitchen, bathrooms, furniture and several other things inside, but to the eyes of people passing by, there are only four walls and a roof. Front end development is those four walls and that roof. HTML is the building itself while CSS is the styling of that building. We took off easy, learning the basic infrastructure behind HTML, a language created in the famous CERN installations in Switzerland. One thing led to another and by the end of the day we were injecting links, images, self-generated text and the whole 9 yards. But while HTML can be entertaining, it's a bit like building a small wooden model car without the colors, the lights, the steering wheel and the entire styling kit. That's where CSS jumps in. We learned how to make our websites flash and sparkle like the latest Ferrari in town. But not everything was of the beauty element. CSS also helped us place everything where it needed to be. It's this magic wand of a tool that allows sites to turn from a white page with text to the wonderful creations that capture our attentions for countless hours.

Last but not least, we needed the catapult to put all this into a browser and that is where Mr. New York New York himself came to the rescue. Sinatra is a domain specific language, a bit like the famous Rails, that would allow us to code in Ruby and then with a few tweaks here and there, we could have basic web apps running on a determined port. This might not sound exciting, but the minute I was able to get my first little app on Chrome I jumped with joy. We could now build web apps. Before joining this <span id="focus"><a href="http://generalassemb.ly">academy</a></span> I thought it would take us the full three months to actually get something plain vanilla into our browsers. They proved me wrong. Combining a number of technologies: HTML/CSS, Ruby and Sinatra we now had in our hands a toolkit to exploit the limits of the Internet and shock every one of its curious crawlers. Two weeks of training and a digital buffet of skills that allowed us to taste a bit of every necessary tool that we would employ turned us into 21st Century MacGuyvers, capable of grabbing the simplest idea in our head and putting it in a medium of communication with 1 billion users. I-N-C-R-E-D-I-B-L-E!

<img src="http://lightbulbmanifesto.files.wordpress.com/2013/04/macgyver.jpeg?w=580" style="height:500px; width:auto;">